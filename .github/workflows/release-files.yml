on:
  release:
    types: [published]

permissions:
  actions: write

jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Dependencies
        run: pip install -r requirements.txt
      - name: Test If Runnable
        run: python mtgdb.py -h
      - name: Version Command
        run: python mtgdb.py -V | cut -d ' ' -f 2 | tee version
      - uses: actions/upload-artifact@v4
        with:
          name: version
          path: ./version
          retention-days: 1
          
  collect-source-and-docs:
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - uses: actions/checkout@v4
      - name: Retrieve Version
        uses: actions/download-artifact@v4
        with:
          name: version
      - name: Create Source Archive
        run: |
          version="$(cat ./version)"
          source_dir="mtgdb-${version}-source"
          git archive --format=tar --prefix="$source_dir/" HEAD | tar xf -
          tar czf "source.tar.gz" "$source_dir"
          rm -rf "$source_dir"
      - name: Create Common Assets Archive
        run: |
          mkdir common-assets
          cp README.md common-assets/
          cp LICENSE.txt common-assets/
          cp source.tar.gz common-assets/
          tar cf "common-assets.tar" common-assets
      - name: Upload Common Assets Artifact
        uses: actions/upload-artifact@v4
        with:
          name: common-assets.tar
          path: ./common-assets.tar
          retention-days: 1
  
  build-windows:
    runs-on: windows-latest
    needs: get-version
    steps:
      - uses: actions/checkout@v4
      - name: Retrieve Version
        uses: actions/download-artifact@v4
        with:
          name: version
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Pyinstaller
        run: pip install -r requirements.txt pyinstaller
      - name: Build with Pyinstaller
        run: pyinstaller mtgdb.py -F
      - name: Prepare Artifacts
        run: |
          $v = Get-Content ./version
          $arch = "${{ runner.arch }}".ToLower()
          $os = "${{ runner.os }}".ToLower()
          mkdir ./dist/mtgdb-$v-$os-$arch
          mv ./dist/mtgdb.exe ./dist/mtgdb-$v-$os-$arch.exe
          echo "BINARY_PATH=\"./dist/mtgdb-$v-$os-$arch.exe\"" >> "$env:GITHUB_ENV"
          echo "WINDOWS_RELEASE_NAME=\"mtgdb-$v-$os-$arch\"" >> ./windows-build-info.txt
          echo "WINDOWS_RELEASE_NAME=\"mtgdb-$v-$os-$arch\"" >> "$env:GITHUB_ENV"
          echo "WINDOWS_ARTIFACT_NAME=\"mtgdb-$v-$os-$arch.exe\"" >> ./windows-build-info.txt
          echo "WINDOWS_ARTIFACT_NAME=\"mtgdb-$v-$os-$arch.exe\"" >> "$env:GITHUB_ENV"
      - name: Confirm Vars (Delete When Done)
        run: |
          echo  "filename: $env:GITHUB_ENV"
          cat "$env:GITHUB_ENV"
          echo "individual vars:"
          echo BINARY_PATH=$env:BINARY_PATH
          echo WINDOWS_RELEASE_NAME=$env:WINDOWS_RELEASE_NAME
          echo WINDOWS_ARTIFACT_NAME=${{ env.WINDOWS_ARTIFACT_NAME }}
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WINDOWS_ARTIFACT_NAME }}
          path: ${{ env.BINARY_PATH }}
          retention-days: 1
      - name: Upload Build Info Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-info.txt
          path: ./windows-build-info.txt
          retention-days: 1

  package-releases:
    needs: [collect-source-and-docs, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Get Build Info Artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-info
          pattern: '*-build-info.txt'
          merge-multiple: true
      - name: Load Build Info
        run: cat build-info/* | tee /dev/stdout >> $GITHUB_ENV
      - name: Download Builds
        uses: actions/download-artifact@v4
        with:
          path: builds
          pattern: mtgdb-*
          merge-multiple: true
      - name: Get Common Assets Artifact
        uses: actions/download-artifact@v4
        with:
          name: common-assets.tar
      - name: Expand Common Assets
        run: tar xf common-assets.tar
      - name: Debug Checks (Delete When Done)
        run: |
          printenv
          ls builds
      - name: Package Windows
        run: |
          mkdir -p "dist/$WINDOWS_RELEASE_NAME"
          mkdir -p archives/
          mv "builds/$WINDOWS_RELEASE_NAME.exe" "dist/$WINDOWS_RELEASE_NAME"
          cp -R common-assets/* "dist/$WINDOWS_RELEASE_NAME"
          zip "$WINDOWS_RELEASE_NAME.zip" "dist/$WINDOWS_RELEASE_NAME" -j
          mv "$WINDOWS_RELEASE_NAME.zip" archives/
      - name: Debug Checks (Delete When Done)
        run: |
          ls archives
          ls dist/*
          printenv
      - name: Upload To Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: gh release upload ${{ github.ref }} archives/*
